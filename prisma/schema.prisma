// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーアカウント
// ***************************************
model UserAccount {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  // has one
  social               Social?
  anonymousUserAccount AnonymousUserAccount? @relation("anonymousUserAccount")

  // has many
  histories      UserAccountHistory[]
  userSkills     UserSkill[]          @relation("userSkills")
  likes          Like[]
  userCopyrights UserCopyright[]      @relation("userCopyrights")

  // created log
  createdSkills                  Skill[]
  createdUserSkills              UserSkill[]              @relation("createdUserSkills")
  createdAnonymousUserAccounts   AnonymousUserAccount[]   @relation("createdAnonymousUserAccounts")
  createdWorks                   Work[]                   @relation("createdWorks")
  createdCategories              Category[]
  createdWorkCategories          WorkCategory[]
  createdCopyrights              Copyright[]
  createdUserCopyrights          UserCopyright[]          @relation("createdUserCopyrights")
  createdAnonymousUserCopyrights AnonymousUserCopyright[]
  createdTags                    Tag[]
  createdWorkTags                WorkTag[]
  createdWorkRelationCategories  WorkRelationCategory[]
  createdWorkRelations           WorkRelation[]

  @@index([deletedAt])
  @@map("user_accounts")
}

// ユーザーアカウント履歴
// ***************************************
model UserAccountHistory {
  id                String   @id @default(uuid())
  userAccountId     String   @map("user_account_id")
  name              String
  slug              String   @unique
  description       String
  thumbnailImageUrl String   @map("thumbnail_image_url")
  published         Boolean  @default(false)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([slug])
  @@index([published])
  @@index([userAccountId])
  @@map("user_account_histories")
}

// ソーシャル
// ***************************************
model Social {
  id            String   @id @default(uuid())
  userAccountId String   @unique @map("user_account_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)

  // has many
  histories SocialHistory[]

  @@index([userAccountId])
  @@map("socials")
}

// ソーシャル履歴
// ***************************************
model SocialHistory {
  id          String   @id @default(uuid())
  socialId    String   @map("social_id")
  websiteUrl  String?  @map("website_url")
  xId         String?  @unique @map("x_id")
  instagramId String?  @unique @map("instagram_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  social Social @relation(fields: [socialId], references: [id], onDelete: Cascade)

  @@index([socialId])
  @@map("social_histories")
}

// スキル
// ***************************************
model Skill {
  id          String   @id @default(uuid())
  name        String   @unique
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // has many
  userSkills UserSkill[]

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@map("skills")
}

// ユーザー - スキル紐づけ
// ***************************************
model UserSkill {
  userAccountId String   @map("user_account_id")
  skillId       String   @map("skill_id")
  createdById   String?  @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount @relation("userSkills", fields: [userAccountId], references: [id], onDelete: Cascade)
  skill       Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation("createdUserSkills", fields: [createdById], references: [id], onDelete: SetNull)

  @@id([userAccountId, skillId])
  @@index([userAccountId, skillId])
  @@map("user_skills")
}

// クレジット用未登録ユーザー
// ***************************************
model AnonymousUserAccount {
  id            String   @id @default(uuid())
  userAccountId String?  @unique @map("user_account_id")
  name          String   @unique
  createdById   String?  @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount? @relation("anonymousUserAccount", fields: [userAccountId], references: [id], onDelete: SetNull)

  // has many
  anonymousUserCopyrights AnonymousUserCopyright[]

  // created log
  createdBy UserAccount? @relation("createdAnonymousUserAccounts", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([name])
  @@map("anonymous_user_account")
}

// リリースノート
// ***************************************
model ReleaseNote {
  id          String   @id @default(uuid())
  version     String
  title       String
  description String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@map("release_notes")
}

// 作品
// ***************************************
model Work {
  id          String    @id @default(uuid())
  createdById String?   @map("created_by_id")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz(3)

  // has many
  workHistories          WorkHistory[]
  workCategories         WorkCategory[]
  workTags               WorkTag[]
  likes                  Like[]
  copyrights             Copyright[]
  workImages             WorkImage[]
  workRelationCategories WorkRelationCategory[]

  // created log
  createdBy UserAccount? @relation("createdWorks", fields: [createdById], references: [id], onDelete: SetNull)

  @@index([deletedAt])
  @@map("works")
}

// 作品履歴
// ***************************************
model WorkHistory {
  id          String   @id @default(uuid())
  workId      String   @map("work_id")
  title       String
  description String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([title])
  @@index([published])
  @@index([workId])
  @@map("work_histories")
}

// いいね
// ***************************************
model Like {
  userAccountId String   @map("user_account_id")
  workId        String   @map("work_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  work        Work        @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@id([userAccountId, workId])
  @@index([userAccountId, workId])
  @@map("likes")
}

// 作品画像
// ***************************************
model WorkImage {
  id        String    @id @default(uuid())
  workId    String    @map("work_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(3)

  // belongs to
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
  @@index([deletedAt])
  @@map("work_images")
}

// タグ
// ***************************************
model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // has many
  workTags WorkTag[]

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([name])
  @@map("tags")
}

// 作品 - タグ紐づけ
// ***************************************
model WorkTag {
  workId      String   @map("work_id")
  tagId       String   @map("tag_id")
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@id([workId, tagId])
  @@index([workId, tagId])
  @@map("work_tags")
}

// カテゴリー
// ***************************************
model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // has many
  workCategories WorkCategory[]

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([name])
  @@map("categories")
}

// 作品 - カテゴリー紐づけ
// ***************************************
model WorkCategory {
  workId      String   @map("work_id")
  categoryId  String   @map("category_id")
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  work     Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@id([workId, categoryId])
  @@index([workId, categoryId])
  @@map("work_categories")
}

// 作品関連リンクカテゴリー
// ***************************************
model WorkRelationCategory {
  id          String   @id @default(uuid())
  workId      String   @map("work_id")
  name        String   @unique
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  // has many
  workRelations WorkRelation[]

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([workId])
  @@index([name])
  @@map("work_relation_categories")
}

// 作品関連リンク
// ***************************************
model WorkRelation {
  id                     String   @id @default(uuid())
  workRelationCategoryId String   @map("work_relation_category_id")
  name                   String
  createdById            String?  @map("created_by_id")
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  workRelationCategory WorkRelationCategory @relation(fields: [workRelationCategoryId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([workRelationCategoryId])
  @@index([name])
  @@map("work_relations")
}

// 作品クレジット
// ***************************************
model Copyright {
  id          String   @id @default(uuid())
  workId      String   @map("work_id")
  name        String   @unique
  createdById String?  @map("created_by_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  // has many
  userCopyrights          UserCopyright[]
  anonymousUserCopyrights AnonymousUserCopyright[]

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@index([name])
  @@map("copyrights")
}

// 作品クレジット - ユーザー紐づけ
// ***************************************
model UserCopyright {
  userAccountId String   @map("user_account_id")
  copyrightId   String   @map("copyright_id")
  createdById   String?  @map("created_by_id")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  userAccount UserAccount @relation("userCopyrights", fields: [userAccountId], references: [id], onDelete: Cascade)
  copyright   Copyright   @relation(fields: [copyrightId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation("createdUserCopyrights", fields: [createdById], references: [id], onDelete: SetNull)

  @@id([userAccountId, copyrightId])
  @@index([userAccountId, copyrightId])
  @@map("user_copyrights")
}

// 作品クレジット - 未登録ユーザー紐づけ
// ***************************************
model AnonymousUserCopyright {
  anonymousUserAccountId String   @map("anonymous_user_account_id")
  copyrightId            String   @map("copyright_id")
  createdById            String?  @map("created_by_id")
  createdAt              DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // belongs to
  anonymousUserAccount AnonymousUserAccount @relation(fields: [anonymousUserAccountId], references: [id], onDelete: Cascade)
  copyright            Copyright            @relation(fields: [copyrightId], references: [id], onDelete: Cascade)

  // created log
  createdBy UserAccount? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  @@id([anonymousUserAccountId, copyrightId])
  @@index([anonymousUserAccountId, copyrightId])
  @@map("anonymous_user_copyrights")
}
